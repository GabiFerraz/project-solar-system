{"version":3,"sources":["components/Header.js","components/Title.js","components/PlanetCard.js","data/planets.js","images/Mercurio.png","images/Venus.png","images/Terra.png","images/Marte.png","images/Jupiter.png","images/Saturno.png","images/Urano.png","images/Netuno.png","components/SolarSystem.js","components/MissionCard.js","data/missions.js","components/Missions.js","components/Footer.js","App.js","index.js"],"names":["Header","React","Component","Title","headline","this","props","PlanetCard","planetName","planetImage","className","src","alt","Planets","name","image","SolarSystem","planetas","map","cadaPlaneta","MissionCard","year","country","destination","USA","URSS","Missions","missao","missions","cadaMissao","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a27a67c9.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (<header><h1>Sistema Solar</h1></header>);\n  }\n}\n\nexport default Header;\n\n// requisito 1 do projeto: importei o React, criei o componente Header através da class, coloquei o render para o código poder funcionar, mostrar na tela, e o retorno, com a tag header e dentro dela a tag h1 com o nome do Sistema Solar. Depois, exportei o Header para poder ser renderizado no App.js que é o componente principal.\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Title extends React.Component {\n  render() {\n    const { headline } = this.props;\n    return (<h2>{headline}</h2>);\n  }\n}\n\nTitle.propTypes = { headline: PropTypes.string.isRequired };\nexport default Title;\n\n// requisito 3 do projeto: importei o React, importei o PropTypes, criei o componente Title através da class, coloquei o render para o código poder funcionar, mostrar na tela. Criei uma const com o nome headline desestruturado (fiz assim pq o lint obriga, se não ele vai reclamar) e informei que ele é uma prop através do this.props. Aí coloquei o retorno, com a tag h2 englobando a prop headline que vai renderizar o texto recebido por ela. Depois, coloquei o componente.propTypes para informar que o headline é uma prop necessária do tipo string, e por último exportei o Title para poder ser renderizado depois dentro do componente SolarSystem. Tudo depois do return é HTML por padrão, aí para colocar JS tem que ser entre {}!!!\n// como ele é um componente genérico, onde irá renderizar o valor que a prop dele receber, ele irá ser utilizado 2 vezes, em dois outros componentes diferentes, para poder gerar os nomes principais: Planetas e Missões.\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass PlanetCard extends React.Component {\n  render() {\n    const { planetName, planetImage } = this.props;\n    return (\n      <div data-testid=\"planet-card\" className=\"planetsPai\">\n        <img\n          src={ planetImage }\n          alt={ `Planeta ${planetName}` }\n          className={ `${planetName} imgsPlan` }\n        />\n        <h3 data-testid=\"planet-name\">{planetName}</h3>\n      </div>);\n  }\n}\n\nPlanetCard.propTypes = { planetName: PropTypes.string.isRequired,\n  planetImage: PropTypes.string.isRequired };\nexport default PlanetCard;\n\n// requisito 5: importei o React e o PropTypes, criei o componente PlanetCard através da class, coloquei o render para o código poder funcionar, mostrar na tela. Criei uma const com os nomes planetName e planetImage desestruturado e informei que eles são props através do this.props. Aí fiz o retorno, com a tag div que vai englobar todo o conteúdo com o atributo data-testid. Aí dentro da div, coloquei a tag h3 com o atributo data-testid com a prop planetName para renderizar o texto recebido por ela. Aí, ainda dentro da tag div, coloquei a tag img que vai renderizar uma imagem com o atributo src recebendo o valor da prop planetImage e, o atributo alt com o texto escrito Planeta e a prop planetName em template literals. Depois, coloquei o componente.propTypes para informar que o planetName e planetImage são props necessárias do tipo string. Por último, exportei o PlanetCard para poder ser renderizado no SolarSystem.\n","import MercurioImg from '../images/Mercurio.png';\nimport VenusImg from '../images/Venus.png';\nimport TerraImg from '../images/Terra.png';\nimport MarteImg from '../images/Marte.png';\nimport JupiterImg from '../images/Jupiter.png';\nimport SaturnoImg from '../images/Saturno.png';\nimport Uranoimg from '../images/Urano.png';\nimport Netunoimg from '../images/Netuno.png';\n\nconst Planets = [\n  { name: 'Mercúrio', image: MercurioImg },\n  { name: 'Vênus', image: VenusImg },\n  { name: 'Terra', image: TerraImg },\n  { name: 'Marte', image: MarteImg },\n  { name: 'Júpiter', image: JupiterImg },\n  { name: 'Saturno', image: SaturnoImg },\n  { name: 'Urano', image: Uranoimg },\n  { name: 'Netuno', image: Netunoimg },\n];\n\nexport default Planets;\n","export default __webpack_public_path__ + \"static/media/Mercurio.a7105a56.png\";","export default __webpack_public_path__ + \"static/media/Venus.397fdee2.png\";","export default __webpack_public_path__ + \"static/media/Terra.990ac782.png\";","export default __webpack_public_path__ + \"static/media/Marte.6cae79d3.png\";","export default __webpack_public_path__ + \"static/media/Jupiter.529cdbe0.png\";","export default __webpack_public_path__ + \"static/media/Saturno.00b7295f.png\";","export default __webpack_public_path__ + \"static/media/Urano.607cb33c.png\";","export default __webpack_public_path__ + \"static/media/Netuno.48cf14b7.png\";","import React from 'react';\nimport Title from './Title';\nimport PlanetCard from './PlanetCard';\nimport Planets from '../data/planets';\n\nclass SolarSystem extends React.Component {\n  render() {\n    const planetas = Planets.map((cadaPlaneta) => (\n      <PlanetCard\n        key={ cadaPlaneta.name }\n        planetName={ cadaPlaneta.name }\n        planetImage={ cadaPlaneta.image }\n      />\n    ));\n    return (\n      <>\n        <div data-testid=\"solar-system\">\n          <Title headline=\"Planetas\" />\n        </div>\n        <section className=\"planet\">{planetas}</section>\n      </>\n    );\n  }\n}\n\nexport default SolarSystem;\n\n// requisito 2 do projeto: importei o React, criei o componente SolarSystem através da class, coloquei o render para o código poder funcionar, mostrar na tela, e o retorno, com a tag div que vai englobar todo o conteúdo, com o atributo data-testid. Depois, exportei o SolarSystem para poder ser renderizado no App.js que é o componente principal.\n// requisito 4: importei o componente Title na linha 2, depois, dentro da tag div pertencente ao componente SolarSystem chamei o componente Title e a props headline com o valor \"Planetas\". O componente Title está dentro de uma tag pq ele é como se fosse uma tag, ele é uma tag especial e passamos a props como se fosse um atributo da tag pq ele está dentro do Title.\n// requisito 6: importei o componente PlanetCard e o planets do data. Dentro do render, antes do return, para poder criar um array novo com o nome e a imagem de cada item da lista de planetas, criei uma const planetas para poder rodar o map no planets. Aí dentro do map abri uma arrow function, coloquei o parâmetro, aí abri a tag (pq depois eu vou chamar ele dentro do return e preciso que ele volte lá em html) e chamei o PlanetCard e como forma de atributos, eu passei a key (chave) com o nome do planeta, pq cada elemento tem que ter uma chave com um nome diferente, e como os planetas não se repetem dá certo, aí passei as props planetName com o parâmetro.name (pq quero o nome lá do arquivo planets do data) e o planetImage com o parâmetro.image. Com isso meu novo array vai estar criado, aí dentro do return eu coloquei uma tag section chamando a minha constante criada acima para poder funcionar e aparecer na tela os planetas com seus nomes.\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MissionCard extends React.Component {\n  render() {\n    const { name, year, country, destination } = this.props;\n    return (\n      <div data-testid=\"mission-card\" className=\"missionsPai\">\n        <h5 data-testid=\"mission-name\" className=\"missionsFP\">{name}</h5>\n        <p data-testid=\"mission-year\" className=\"missionsF\">{year}</p>\n        <p data-testid=\"mission-country\" className=\"missionsF\">{country}</p>\n        <p data-testid=\"mission-destination\" className=\"missionsF\">{destination}</p>\n      </div>);\n  }\n}\n\nMissionCard.propTypes = { name: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n  destination: PropTypes.string.isRequired };\nexport default MissionCard;\n\n// requisito 9: importei o React e o PropTypes, criei o componente MissionCard através da class, coloquei o render para o código poder funcionar, mostrar na tela. Criei uma const com os nomes name, year, country e destination desestruturados e informei que eles são props através do this.props. Aí fiz o retorno, com a tag div que vai englobar todo o conteúdo com o atributo data-testid. Aí dentro da div, coloquei a tag h5 com o atributo data-testid com a prop name para renderizar o texto recebido por ela. Aí, ainda dentro da tag div, coloquei a tag p com o atributo data-testid com a prop year para renderizar o texto recebido por ela, e repeti o processo mais 2x com o country e destination. Depois, coloquei o componente.propTypes para informar que o name, year, country e destination são props necessárias do tipo string. Por último, exportei o PlanetCard para poder ser renderizado no componente Missions.\n","const USA = 'Estados Unidos';\nconst URSS = 'URSS';\n\nconst Missions = [\n  {\n    name: 'Apollo 11',\n    year: '1960',\n    country: USA,\n    destination: 'Lua',\n  },\n  {\n    name: 'Voyager 1',\n    year: '1977',\n    country: USA,\n    destination: 'Espaço interestelar',\n  },\n  {\n    name: 'Mars Pathfinder',\n    year: '1996',\n    country: USA,\n    destination: 'Marte',\n  },\n  {\n    name: 'Estação Internacional Espacial',\n    year: '1998',\n    country: 'Estados Unidos e Rússia',\n    destination: 'Órbita terrestre',\n  },\n  {\n    name: 'Kepler',\n    year: '2009',\n    country: USA,\n    destination: 'Espaço interestelar',\n  },\n  {\n    name: 'Cassini-Huygens',\n    year: '2009',\n    country: 'Estados Unidos e União Europeia',\n    destination: 'Saturno',\n  },\n  {\n    name: 'Mariner 2',\n    year: '1962',\n    country: USA,\n    destination: 'Vênus',\n  },\n  {\n    name: 'Venera 4',\n    year: '1967',\n    country: URSS,\n    destination: 'Vênus',\n  },\n  {\n    name: 'Mariner 5',\n    year: '1967',\n    country: USA,\n    destination: 'Vênus',\n  },\n  {\n    name: 'Mariner 10',\n    year: '1975',\n    country: USA,\n    destination: 'Vênus',\n  },\n  {\n    name: 'Venera 16',\n    year: '1983',\n    country: URSS,\n    destination: 'Vênus',\n  },\n  {\n    name: 'MESSENGER',\n    year: '2004',\n    country: USA,\n    destination: 'Mercúrio',\n  },\n  {\n    name: 'Genesis',\n    year: '2001',\n    country: USA,\n    destination: 'Terra',\n  },\n  {\n    name: '2001 Mars Odyssey',\n    year: '2001',\n    country: USA,\n    destination: 'Marte',\n  },\n  {\n    name: 'Mars Surveyor 98 Lander',\n    year: '1999',\n    country: USA,\n    destination: 'Marte',\n  },\n  {\n    name: 'Nozomi (Planeta B)',\n    year: '1998',\n    country: 'Japão',\n    destination: 'Marte',\n  },\n  {\n    name: 'Fobos 1',\n    year: '1988',\n    country: URSS,\n    destination: 'Marte',\n  },\n  {\n    name: 'Fobos 2',\n    year: '1988',\n    country: URSS,\n    destination: 'Marte',\n  },\n  {\n    name: 'Galileo',\n    year: '1989',\n    country: USA,\n    destination: 'Júpiter',\n  },\n  {\n    name: 'Cassini/Huygens',\n    year: '1997',\n    country: 'Estados Unidos e Europa',\n    destination: 'Saturno',\n  },\n];\n\nexport default Missions;\n","import React from 'react';\nimport Title from './Title';\nimport MissionCard from './MissionCard';\nimport missions from '../data/missions';\n\nclass Missions extends React.Component {\n  render() {\n    const missao = missions.map((cadaMissao) => (\n      <MissionCard\n        key={ cadaMissao.name }\n        name={ cadaMissao.name }\n        year={ cadaMissao.year }\n        country={ cadaMissao.country }\n        destination={ cadaMissao.destination }\n      />\n    ));\n    return (\n      <>\n        <div data-testid=\"missions\" />\n        <Title headline=\"Missões\" />\n        <section className=\"paiDoPai\">{missao}</section>\n      </>\n    );\n  }\n}\n\nexport default Missions;\n\n// requisito 7: importei o React, criei o componente Missions através da class, coloquei o render para o código poder funcionar, e o retorno, com a tag div que vai englobar todo o conteúdo, com o atributo data-testid. Depois, exportei o Missions para poder ser renderizado no App.js que é o componente principal.\n// requisito 8: importei o componente Title, depois, dentro da tag div pertencente ao componente Missions chamei o componente Title e a props headline com o valor \"Missões\". O componente Title está dentro de uma tag pq ele é como se fosse uma tag, ele é uma tag especial e passamos a props como se fosse um atributo da tag pq ele está dentro do Title.\n// requisito 10: importei o componente MissionCard e o missions do data. Dentro do render, antes do return, para poder criar um array novo com o nome, ano, país e local de cada item da lista de missões, criei uma const missao para poder rodar o map no missions. Aí dentro do map abri uma arrow function, coloquei o parâmetro, aí abri a tag (pq depois eu vou chamar ele dentro do return e preciso que ele volte lá em html) e chamei o MissionCard e como forma de atributos, eu passei a key (chave) com o nome da missão, pq cada elemento tem que ter uma chave com um nome diferente (pq o react não sabe diferenciar), e como as missões não se repetem dá certo, aí passei as props name com o parâmetro.name (pq quero o nome lá do arquivo missions do data), e repeti esse processo mais 3x com o year, country e destination. Com isso, meu novo array vai estar criado. Aí, dentro do return, eu coloquei uma tag section chamando a minha constante criada acima para poder funcionar e aparecer na tela as missões com seus nomes, anos, países e locais.\n","import React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <section className='footer'>Desenvolvido Por Gabi Ferraz</section>);\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header';\nimport SolarSystem from './components/SolarSystem';\nimport Missions from './components/Missions';\nimport './App.css';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <SolarSystem />\n        <Missions />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// para completar o requisito 1, eu importei meu componente Header na linha 2, aí chamei ele para ser renderizado na linha 10, dentro do return da class App, que é o componente principal. Coloquei a tag vazia <> para o lint não reclamar que tem muita coisa junta no return. Ela é uma tag sem nome que tá englobando todo o código. Não vai aparecer no final de tudo lá no inspect.\n// para completar o requisito 2, eu importei meu componente SolarSystem na linha 3.\n// para completar o requisito 7, eu importei o componente Missions na linha 4.\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}